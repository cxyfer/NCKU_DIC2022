module LZ77_Decoder(clk,reset,code_pos,code_len,chardata,encode,finish,char_nxt);
input 				clk;
input 				reset;
input 		[3:0] 	code_pos;
input 		[2:0] 	code_len;
input 		[7:0] 	chardata;
output reg 			encode;
output reg 			finish;
output reg	[7:0] 	char_nxt;

reg [2:0] Count, NextCount;
reg [7:0] buffer [0:8];
reg [7:0] tmp_buf [0:8];
integer i;

// 參考作業說明的Fig5，輸入信號會剛好持續code_len+1個clk，每個clk計算一次char_nxt就行了

always @(posedge clk, posedge reset) begin
	if(reset) begin
		for (i=0; i<9; i=i+1) begin
			buffer[i] <= 8'h0;
		end
		Count <= 3'b0;
		
	end
	else begin
		encode <= 1'b0;
		for (i=1; i<9; i=i+1) begin
			buffer[i] <= buffer[i-1];
		end
		//finish = (char_nxt == 8'h24) ? 1'b1 : 1'b0;
		if(char_nxt == 8'h24)
			finish = 1'b1;
		else
			finish = 1'b0;
		if(code_len == 3'b0 || Count == code_len) begin
			Count <= 3'b0;
			char_nxt <= chardata;
			buffer[0] <= chardata;
		end
		else begin
			Count <= Count + 1'b1;
			char_nxt <= buffer[code_pos];
			buffer[0] <= buffer[code_pos];
		end
		
	end
end

/*always @(*) begin
	if (code_len == 3'b0) begin
		Count <= 3'b0;
		char_nxt <= chardata;
		tmp_buf[0] <= chardata;
	end
	else if (Count == code_len) begin
		Count <= 3'b0;
		char_nxt <= chardata;
		tmp_buf[0] <= chardata;
	end
	if(code_len == 3'b0 || Count == code_len) begin
		
	end
end*/

endmodule